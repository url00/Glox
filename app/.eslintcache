[{"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\App.js":"1","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\reportWebVitals.js":"2","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\tokenTypes.js":"3","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\lexer.js":"4","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\index.js":"5","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\util.js":"6"},{"size":8061,"mtime":1609031597688,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1606580149566,"results":"9","hashOfConfig":"8"},{"size":940,"mtime":1609028134233,"results":"10","hashOfConfig":"8"},{"size":6858,"mtime":1609032868756,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1606580149566,"results":"12","hashOfConfig":"8"},{"size":71,"mtime":1609014874815,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1bw0kbw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\App.js",["27","28","29","30","31","32","33"],"import React, { useState, useRef, useEffect } from \"react\";\nimport useInterval from \"@use-it/interval\";\nimport * as d3 from \"d3\";\nimport styled from \"styled-components\";\nimport lexer from \"./lexer\";\nimport produce from \"immer\";\nimport { copy } from \"./util\";\n\nconst AppContainer = styled.div`\n  display: grid;\n  grid-template: 1fr / 1fr 2fr;\n  width: 100%;\n  height: 100%;\n`;\n\nconst InputTextbox_ = styled.input`\n  font-family: monospace;\n  font-size: 8pt;\n  overflow-y: hidden;\n  background-color: ${(p) => (p.color ? p.color : \"white\")};\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  resize: none;\n  border: 0 none;\n  outline: none;\n  overflow-x: auto;\n`;\n\nconst InputTextbox = React.forwardRef((props, ref) => {\n  return <InputTextbox_ wrap=\"off\" ref={ref} {...props} />;\n});\n\nconst ConsoleOutput_ = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: monospace;\n  font-size: 8pt;\n  overflow-x: auto;\n  overflow-y: scroll;\n  color: white;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n`;\n\nfunction getDefaultAppState() {\n  return {\n    input: \"\",\n    display: null,\n  };\n}\n\nfunction getAppState() {\n  const a = window.localStorage.getItem(\"app\");\n  const b = a ? JSON.parse(a) : getDefaultAppState();\n  if (!b.input) {\n    b.input = \"\";\n    setAppState(b);\n  }\n  return b;\n}\n\nfunction setAppState(x) {\n  const y = JSON.stringify(x);\n  window.localStorage.setItem(\"app\", y);\n}\n\nconst DisplayContainer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-auto-rows: 1fr;\n  width: 100%;\n  height: 100vh;\n`;\n\nconst ConsoleContainer = styled.div`\n  display: grid;\n  grid-template: 1fr auto / 1fr;\n  width: 100%;\n  height: 100vh;\n`;\n\nconst ConsoleOutputLine = styled.pre`\n  padding: 0;\n  margin: 0;\n`;\n\nconst ConsoleOutput = ({ outputs }) => {\n  const r = useRef(null);\n  useEffect(() => {\n    if (!r) {\n      return;\n    }\n    r.current.scrollTop = r.current.scrollHeight;\n  }, [r, outputs]);\n  return (\n    <ConsoleOutput_ ref={r}>\n      {outputs.map((x, i) => (\n        <ConsoleOutputLine key={i}>{x}</ConsoleOutputLine>\n      ))}\n    </ConsoleOutput_>\n  );\n};\n\nclass ConsoleInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.r = React.createRef();\n  }\n\n  componentDidMount() {\n    this.r.current.focus();\n    this.r.current.addEventListener(\"keyup\", (e) => {\n      if (e.keyCode !== 13) {\n        return;\n      }\n      e.preventDefault();\n      const c = this.r.current.value;\n      this.props.onCommand(c);\n      this.r.current.value = \"\";\n    });\n  }\n\n  render() {\n    return <InputTextbox ref={this.r} />;\n  }\n}\n\nclass Command {\n  constructor(c) {\n    this.r = c.split(\" \");\n  }\n\n  pop() {\n    return this.r.shift();\n  }\n\n  read() {\n    return this.r.join(\" \");\n  }\n\n  is(c) {\n    if (this.r.length <= 0) {\n      return false;\n    }\n\n    return this.r[0] === c;\n  }\n}\n\nconst InputTextArea_ = styled.textarea`\nfont-family: monospace;\nfont-size: 8pt;\noverflow-y: hidden;\nbackground-color: aliceblue;\nwidth: 100%;\nheight: 100%;\npadding: 0;\nresize: none;\nborder: 0 none;\noutline: none;\noverflow-x: auto;\n`;\n\nconst InputTextArea = React.forwardRef((props, ref) => {\n  return <InputTextArea_ ref={ref} {...props} wrap=\"off\"/>\n});\n\nclass SourceInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.r = React.createRef();\n  }\n\n  componentDidMount() {\n    this.r.current.value = getAppState().input;\n    this.r.current.addEventListener(\"change\", (e) => {\n      const as = getAppState();\n      as.input = this.r.current.value;\n      setAppState(as);\n    });\n  }\n\n  render() {\n    return (\n      <InputTextArea ref={this.r} {...this.props} />\n    );\n  }\n}\n\nconst JsonDisplay_ = styled.pre`\n  margin: 0;\n  overflow-x: auto;\n`;\nconst JsonDisplay = ({ thing, ...props }) => {\n  return (\n    <JsonDisplay_ {...props}>{JSON.stringify(thing, null, 2)}</JsonDisplay_>\n  );\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    const as = getAppState();\n    let dg = (state) => { return null };\n    if (false) {\n    } else if (as.display === \"JsonDisplay\") {\n      dg = this.createJsonDisplayGenerator();\n    }\n    const ns = {\n      consoleInput: \"\",\n      consoleOutput: [],\n      lexerState: lexer.createState(as.input),\n      displayGenerator: dg\n    };\n    ns.display = dg(ns);\n    this.state = ns;\n  }\n\n  createJsonDisplayGenerator = () => {\n    return ((state) => {\n      const reactState = produce(state, x => {\n        delete x['consoleInput'];\n        delete x['consoleOutput'];\n        delete x['display'];\n      });\n      const thing = {\n        appState: getAppState(),\n        reactState\n      };\n      return <JsonDisplay thing={thing} />;\n    });\n  }\n\n  handleConsoleInputOnCommand = (c) => {\n    const o = [];\n    o.push(c);\n    var command = new Command(c);\n    if (false) {\n    } else if (command.is(\"s\")) {\n      command.pop();\n      if (false) {\n      } else if (command.is(\"l\")) {\n        this.setState(\n          produce((x) => {\n            x.display = this.state.displayGenerator(this.state);\n          })\n        );\n      } else if (command.is(\"reset\")) {\n      } else {\n        o.push(`usage: s <subcommand> [<args>]\n\nsubcommand can be one of:\n\n  l      Load the current input file.\n\n  reset  Reset the internal state.\n\n  help   Print this help text.`);\n      }\n    } else if (command.is(\"d\")) {\n      command.pop();\n      if (false) {\n      } else if (command.is(\"j\")) {\n        const dg = this.createJsonDisplayGenerator();\n        this.setState(\n          produce((x) => {\n            x.displayGenerator = dg;\n            x.display = dg(this.state);\n          })\n        );\n        const as = getAppState();\n        as.display = \"JsonDisplay\";\n        setAppState(as);\n      } else {\n        o.push(`usage: d <subcommand> [<args>]\n\nsubcommand can be one of:\n\n  j      Change display to a raw JSON view of the internal\n         state of the system.\n\n  i      Change display to a basic text input for Glox code.\n\n  l      Change display to a graphical overview of the\n         lexing process.\n  \n  help   Print this help text.`);\n      }\n    } else if (command.is(\"l\")) {\n      command.pop();\n      if (false) {\n      } else if (command.is(\"s\")) {\n        const s = copy(this.state.lexerState);\n        lexer.step(s);\n        this.setState(\n          produce((x) => {\n            x.lexerState = s;\n            x.display = this.state.displayGenerator(this.state);\n          })\n        );\n      } else if (command.is(\"run\")) {\n        const s = copy(this.state.lexerState);\n        lexer.scan(s);\n        this.setState(\n          produce((x) => {\n            x.lexerState = s;\n            x.display = this.state.displayGenerator(this.state);\n          })\n        );\n      } else if (command.is(\"r\")) {\n        const as = getAppState();\n        this.setState(\n          produce((x) => {\n            x.lexerState = lexer.createState(as.input);\n            x.display = this.state.displayGenerator(this.state);\n          })\n        );\n      } else {\n        o.push(`usage: l <subcommand> [<args>]\n\nsubcommand can be one of:\n\n  r      Reset the internal state of the lexer.\n\n  s      Advance the lexer one step.\n\n  run    Run the lexer until completion.\n  \n  help   Print this help text.`);\n      }\n    } else {\n      o.push(`usage: <command> [<args>]\n\ncommand can be one of:\n\n  l      Work with lexer.\n\n  p      Work with parser.\n\n  d      Alter the display.\n\n  s      Work with internal state.\n  \n  help   Print this help text.`);\n    }\n    this.setState(\n      produce((x) => {\n        x.consoleOutput = x.consoleOutput.concat(o);\n        x.display = this.state.displayGenerator(this.state);\n      })\n    );\n  };\n\n  render() {\n    return (\n      <AppContainer>\n        <ConsoleContainer>\n          <ConsoleOutput outputs={this.state.consoleOutput} />\n          <ConsoleInput onCommand={this.handleConsoleInputOnCommand} />\n        </ConsoleContainer>\n        <DisplayContainer>\n          <SourceInput />\n          {this.state.display}\n        </DisplayContainer>\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\reportWebVitals.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\tokenTypes.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\lexer.js",["34","35","36","37","38","39","40","41","42","43"],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\index.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\util.js",[],{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":19},{"ruleId":"44","severity":1,"message":"49","line":3,"column":13,"nodeType":"46","messageId":"47","endLine":3,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":31,"column":10,"nodeType":"52","endLine":31,"endColumn":59},{"ruleId":"50","severity":1,"message":"53","line":99,"column":5,"nodeType":"52","endLine":99,"endColumn":29},{"ruleId":"50","severity":1,"message":"54","line":168,"column":10,"nodeType":"52","endLine":168,"endColumn":59},{"ruleId":"50","severity":1,"message":"55","line":199,"column":5,"nodeType":"52","endLine":199,"endColumn":30},{"ruleId":"44","severity":1,"message":"56","line":2,"column":10,"nodeType":"46","messageId":"47","endLine":2,"endColumn":14},{"ruleId":"44","severity":1,"message":"57","line":27,"column":10,"nodeType":"46","messageId":"47","endLine":27,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":135,"column":23,"nodeType":"60","messageId":"61","endLine":135,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":187,"column":23,"nodeType":"60","messageId":"61","endLine":187,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":190,"column":24,"nodeType":"60","messageId":"61","endLine":190,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":196,"column":23,"nodeType":"60","messageId":"61","endLine":196,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":197,"column":24,"nodeType":"60","messageId":"61","endLine":197,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":206,"column":23,"nodeType":"60","messageId":"61","endLine":206,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":207,"column":33,"nodeType":"60","messageId":"61","endLine":207,"endColumn":35},{"ruleId":"62","severity":1,"message":"63","line":229,"column":1,"nodeType":"64","endLine":234,"endColumn":3},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useInterval' is defined but never used.","'d3' is defined but never used.","react/jsx-pascal-case","Imported JSX component InputTextbox_ must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component ConsoleOutput_ must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component InputTextArea_ must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsonDisplay_ must be in PascalCase or SCREAMING_SNAKE_CASE","'copy' is defined but never used.","'substr' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]