[{"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\App.js":"1","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\reportWebVitals.js":"2","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\tokenTypes.js":"3","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\lexer.js":"4","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\index.js":"5","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\util.js":"6"},{"size":8073,"mtime":1609030569328,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1606580149566,"results":"9","hashOfConfig":"8"},{"size":940,"mtime":1609028134233,"results":"10","hashOfConfig":"8"},{"size":4039,"mtime":1609030466329,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1606580149566,"results":"12","hashOfConfig":"8"},{"size":71,"mtime":1609014874815,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1bw0kbw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\App.js",["27","28","29","30","31","32","33"],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\reportWebVitals.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\tokenTypes.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\lexer.js",["34","35","36","37","38","39"],"import { tokenTypes } from \"./tokenTypes\";\r\nimport { copy } from \"./util\";\r\n\r\nfunction createToken() {\r\n  return {\r\n    type: null,\r\n    lexeme: null,\r\n    literalValue: null,\r\n    line: null,\r\n    startPos: null,\r\n    endPos: null,\r\n  };\r\n}\r\n\r\nfunction charAt(s, pos) {\r\n  if (pos < 0) {\r\n    return \"\";\r\n  }\r\n\r\n  if (pos < s.length) {\r\n    return s.charAt(pos);\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nfunction substr(s, start, end) {\r\n  start = Math.min(Math.max(0, start), s.length);\r\n  end = Math.max(Math.min(s.length, end), 0);\r\n  return s.substr(start, end);\r\n}\r\n\r\nfunction createState(source) {\r\n  const ls = {\r\n    source,\r\n    errors: [],\r\n    wipToken: createToken(),\r\n    tokens: [],\r\n    startPos: 0,\r\n    currentPos: 0,\r\n    lineNum: 1,\r\n    currentChar: null,\r\n    state: \"scanning\"\r\n  };\r\n  ls.wipToken.startPos = 0;\r\n  refresh(ls);\r\n  return ls;\r\n}\r\n\r\nfunction step(ls) {\r\n  if (false) {\r\n  } else if (ls.state === \"scanning\") {\r\n    if (false){\r\n    } else if (ls.currentChar === \"(\") {\r\n      ls.wipToken.type = tokenTypes.LEFT_PAREN;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \")\") {\r\n      ls.wipToken.type = tokenTypes.RIGHT_PAREN;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \"{\") {\r\n      ls.wipToken.type = tokenTypes.LEFT_BRACE;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \"}\") {\r\n      ls.wipToken.type = tokenTypes.RIGHT_BRACE;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \",\") {\r\n      ls.wipToken.type = tokenTypes.COMMA;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \".\") {\r\n      ls.wipToken.type = tokenTypes.DOT;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \"-\") {\r\n      ls.wipToken.type = tokenTypes.MINUS;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \"+\") {\r\n      ls.wipToken.type = tokenTypes.PLUS;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \";\") {\r\n      ls.wipToken.type = tokenTypes.SEMICOLON;\r\n      ls.state = \"token found\";\r\n    } else if (ls.currentChar === \"*\") {\r\n      ls.wipToken.type = tokenTypes.STAR;\r\n      ls.state = \"token found\";\r\n    } else if(ls.currentChar === \"!\") {\r\n      ls.wipToken.lexeme = ls.currentChar;\r\n      ls.wipToken.type = tokenTypes.BANG;\r\n      ls.state = \"possible multichar token found\";\r\n    } else if(ls.currentChar === \"/\") {\r\n      ls.wipToken.lexeme = ls.currentChar;\r\n      ls.wipToken.type = tokenTypes.SLASH;\r\n      ls.state = \"possible multichar token found\";\r\n    } else {\r\n    }\r\n    ls.currentPos++;\r\n    refresh(ls);\r\n  } else if (ls.state === \"token found\") {\r\n    ls.wipToken.endPos = ls.currentPos - 1;\r\n    ls.tokens.push(ls.wipToken);\r\n    ls.startPos = ls.currentPos;\r\n    ls.wipToken = createToken();\r\n    ls.wipToken.startPos = ls.startPos;\r\n    ls.state = \"scanning\";\r\n  } else if (ls.state == \"possible multichar token found\") {\r\n    if(false) {\r\n    } else if (ls.wipToken.type === tokenTypes.BANG) {\r\n      if (ls.currentChar === \"=\") {\r\n        ls.currentPos++;\r\n        refresh(ls);\r\n        ls.state = \"token found\";\r\n        ls.wipToken.type = tokenTypes.BANG_EQUAL;\r\n        ls.wipToken.lexeme = \"!=\";\r\n      } else {\r\n        ls.state = \"token found\";\r\n      }\r\n    } else if (ls.wipToken.type === tokenTypes.SLASH) {\r\n      if (ls.currentChar === \"/\") {\r\n        ls.currentPos++;\r\n        refresh(ls);\r\n        ls.state = \"comment\";\r\n        ls.wipToken = null;\r\n      } else {\r\n        ls.state = \"token found\";\r\n      }\r\n    }\r\n  } else if (ls.state == \"comment\") {\r\n    ls.currentPos++;\r\n    refresh(ls);\r\n    if (ls.currentChar == \"\\n\") {\r\n      ls.wipToken = createToken();\r\n      ls.startPos = ls.currentPos;\r\n      ls.wipToken.startPos = ls.startPos;\r\n      ls.state = \"scanning\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction refresh(ls) {\r\n  ls.currentChar = charAt(ls.source, ls.currentPos);\r\n}\r\n\r\nfunction scan(ls) {\r\n  while (ls.currentPos < ls.source.length) {\r\n    step(ls);\r\n  }\r\n}\r\n\r\nexport default {\r\n  createToken,\r\n  createState,\r\n  step,\r\n  scan\r\n};\r\n","C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\index.js",[],"C:\\Users\\Nathan Bergeron\\Desktop\\Glox\\app\\src\\util.js",[],{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"44","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":19},{"ruleId":"40","severity":1,"message":"45","line":3,"column":13,"nodeType":"42","messageId":"43","endLine":3,"endColumn":15},{"ruleId":"46","severity":1,"message":"47","line":31,"column":10,"nodeType":"48","endLine":31,"endColumn":59},{"ruleId":"46","severity":1,"message":"49","line":99,"column":5,"nodeType":"48","endLine":99,"endColumn":29},{"ruleId":"46","severity":1,"message":"50","line":168,"column":10,"nodeType":"48","endLine":168,"endColumn":59},{"ruleId":"46","severity":1,"message":"51","line":199,"column":5,"nodeType":"48","endLine":199,"endColumn":30},{"ruleId":"40","severity":1,"message":"52","line":2,"column":10,"nodeType":"42","messageId":"43","endLine":2,"endColumn":14},{"ruleId":"40","severity":1,"message":"53","line":27,"column":10,"nodeType":"42","messageId":"43","endLine":27,"endColumn":16},{"ruleId":"54","severity":1,"message":"55","line":103,"column":23,"nodeType":"56","messageId":"57","endLine":103,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":125,"column":23,"nodeType":"56","messageId":"57","endLine":125,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":128,"column":24,"nodeType":"56","messageId":"57","endLine":128,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":147,"column":1,"nodeType":"60","endLine":152,"endColumn":3},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useInterval' is defined but never used.","'d3' is defined but never used.","react/jsx-pascal-case","Imported JSX component InputTextbox_ must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component ConsoleOutput_ must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component InputTextArea_ must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsonDisplay_ must be in PascalCase or SCREAMING_SNAKE_CASE","'copy' is defined but never used.","'substr' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]